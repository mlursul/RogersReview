---

comment: |

  This annotated Docassemble interview shows how to use the text messaging / Twilio integration

  offered by Docassemble.



  For more information on using text messages, see https://docassemble.org/docs/functions.html#send_sms



  It includes examples of using scheduled tasks and basic date math, as well as using the Individual object.

---

metadata:

  title: |

    Rogers Review Reminder System

---

comment: |

  The modules block allows you to include optional Docassemble features.

  see: https://docassemble.org/docs/initial.html#modules

modules:

  - docassemble.base.util

---

comment: |

  The objects block allows you to make use of object-oriented classes. This is a very powerful feature

  but you can get by with just a little understanding of it.

  See: https://docassemble.org/docs/objects.html and https://www.nonprofittechy.com/2018/09/12/object-oriented-programming-for-document-assembly-developers/

objects:

  - client: Individual # Creates a new variable named client, which is an instance of an Individual object

---

comment: |

  It's a good idea, but not required, to control the order of questions in your interview

  with a single mandatory code block like this one.



  Just list the variables that you want Docassemble to find, in order. If a screen defines more than

  one variable you only need to list one variable from that screen.

  See: https://docassemble.org/docs/logic.html#order



  You can also include Python code here but usually should only use "if" statements that control interview flow.

  See: https://github.com/GBLS/docassemble-workinggroup/blob/master/Skillshares/2.%20adding%20in%20logic/basic_logic.md

mandatory: True

scan for variables: False

code: |

  # First, we tell Docassemble that this interview is allowed to run in the background

  allow_cron = True

  # We have to turn multi-user on to make use of scheduled tasks

  multi_user = True 



  intro_screen

  client.name.first

  client.phone_number

  review_date

  send_all_done_text

  ending_screen

---

decoration: landmark

question: |

  Rogers Review Reminder System

subquestion: |

  This interview will help you understand when your Rogers Review hearing is scheduled.

  It will send you reminders 60-days, 30-days, 2-weeks, and 1-week before court.

field: intro_screen

---

question: |

  What is your name?

fields:

  - First name: client.name.first

  - Middle name: client.name.middle

    required: False

  - Last name: client.name.last

comment: |

  Notice that objects include sub-variables (attributes). You access them with "dot" notation. client.name is itself an object

---

decoration: calendar-day

question: |

  When is your Rogers Review date?
  
subquestion: |

  Take a look at the REVIEW ORDER Antipsychotic Medication form provided to you by the court.

  Item 2 of the REVIEW ORDER includes the review date and time.

fields:

  - What is the review date?: review_date

    datatype: date

---

question: |

  What is your cell phone number?

subquestion: |

  To receive text message reminders about your Rogers Review hearing, please provide your cell phone number. 
  
  *Please note that standard text messaging rates apply.*

fields:

  - Cell phone number: client.phone_number

---

code: |

  # using the task_not_yet_performed function helps us make sure we don't send a text twice

  if task_not_yet_performed('send all done'):

    send_sms(to=client, template=send_all_done_text_template, task="send all done")

  

  # A common way to mark the end of a code block is to set a dummy variable to True

  send_all_done_text = True

---

template: send_all_done_text_template

subject: |

  Court date reminder

content: |

  Hi ${client}, this is Suffolk Legal Innovation and Technology Lab. We'll send you reminder text messages for your Rogers Review hearing, scheduled on ${review_date}. 

---

comment: |

  cron_daily is a special event that will run once a day even if the user isn't logged in. It comes from the Unix cron utility

  which runs scheduled tasks. Scheduled tasks can only run on interviews that aren't encrypted.

  See: https://docassemble.org/docs/background.html#scheduled

event: cron_daily

code: |

  # Date comparison includes time, so we use a fuzzy comparison.

  if task_not_yet_performed("scheduled text") and today() < new_court_date.plus(days=1) and today() > new_court_date.plus(days=-1):

    # Individual objects are pretty handy. send_sms knows to check the .phone_number attribute to send a text message

    # We could have also just specified the phone number directly

    send_sms(to=client,template=scheduled_text_template, event="scheduled text")

---

template: reminder_email_60

subject: |
  Rogers Review 60-day Reminder 

content: |
  Hello ${client}, this is Suffolk Legal Innovation and Technology Lab. According to our records, your Rogers Review hearing is 60-days away, on ${review_date}.
---
event: cron_daily
code: |
  if task_not_yet_performed('60 day reminder') and date_difference(starting=review_date).days > 60:
    send_email(to=email_address, template=reminder_email_60, task='60 day reminder')
  response()
---
template: reminder_email_30

subject: |
  Rogers Review 30-day Reminder 

content: |
  Hello ${client}, this is Suffolk Legal Innovation and Technology Lab. According to our records, your Rogers Review hearing is 30-days away, on ${review_date}.
---
event: cron_daily
code: |
  if task_not_yet_performed('30 day reminder') and date_difference(starting=review_date).days > 30:
    send_email(to=email_address, template=reminder_email_30, task='30 day reminder')
  response()

---
template: reminder_email_14

subject: |
  Rogers Review 14-day Reminder 

content: |
  Hello ${client}, this is Suffolk Legal Innovation and Technology Lab. According to our records, your Rogers Review hearing is 14-days away, on ${review_date}.
---
event: cron_daily
code: |
  if task_not_yet_performed('14 day reminder') and date_difference(starting=review_date).days > 14:
    send_email(to=email_address, template=reminder_email_14, task='14 day reminder')
  response()
---
template: reminder_email_7

subject: |
  Rogers Review 7-day Reminder 

content: |
  Hello ${client}, this is Suffolk Legal Innovation and Technology Lab. According to our records, your Rogers Review hearing is 7-days away, on ${review_date}.
---
event: cron_daily
code: |
  if task_not_yet_performed('7 day reminder') and date_difference(starting=review_date).days > 7:
    send_email(to=email_address, template=reminder_email_7, task='7 day reminder')
  response()
---
event: ending_screen

question: |

  Thanks for using the Rogers Review Reminder System, ${client}!

subquestion: |

  % if review_date > today():

  We will send you text and/or email reminders of your Rogers Review hearing scheduled for ${review_date}.

  % endif
